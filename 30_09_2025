#Time complexity O(log(m*n))


#Here Since it is sorted in linear fashion, we can apply Two Pointers just like we do in a sorted array, but just we need to calculate the correct column and row of the mid value.

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m=len(matrix)
        n=len(matrix[0])
        left=0
        right=m*n-1
        while left<=right:
            mid=(left+right)//2
            value=matrix[mid//n][mid%n]
            if value==target:
                return True
            elif value<target:
                left=mid+1
            else:
                right=mid-1
        return False



#Time Complexity O(log(m*n))
#Here we check with the last value of each row, if the target is less than or equal to the last element, we check if the target is within the row and break,


class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        row,col=len(matrix),len(matrix[0])
        for i in range(row):
            if target<=matrix[i][col-1]:
                print(matrix[i][:col])
                if target in matrix[i][:col]:
                    return True
        return False
